Najpierw :
colcon build --symlink-install --packages-select interpolation_interfaces


colcon build --symlink-install --packages-select lab5_kinematyka_odwrotna

ros2 launch lab5_kinematyka_odwrotna lab3.launch.py
ros2 run lab5_kinematyka_odwrotna service2
ros2 run lab5_kinematyka_odwrotna client2 [ parametry wywołania ]

ros2 run lab5_kinematyka_odwrotna ikin

ros2 run lab5_kinematyka_odwrotna kdl - w celach porównawczych -> zaznacza trajektorię końcówki


# Wstępne ustawienie robota (poprzez interpolację)
ros2 run lab5_kinematyka_odwrotna service
ros2 run lab5_kinematyka_odwrotna client [ parametry wywołania ]



---------------------------

Zrobione:

- dodana elipsa
- działają WARNy w ROSLog
- kiedy robot nie może osiągnąć kolejnej pozycji, zostaje w ostatniej dopuszczalnej i nie publikuje nowej
- gotowe ReadMe
- dodanie węzła do zadawania położenia początkowego (interpolacja z lab 4)
- dodanie markera do końcówki robota ( w celu porównania z trajektorią referencyjną)
( wyświetla zielone sześciany w miejscach, gdzie robot faktycznie się porusza - w RViz2 trzeba dodać Marker Array '/marker_KDL')
- teroretyczna część WIKI ( brakuje między innymi rqt i screena ze śledzenia trajektorii)


---------------------------

Do zrobienia (lecę wg. Moodle i notatek):

- wypada chyba uwzględnić offset na końcówkę,
- przy zaznaczaniu pozycji końcówki trzeba zrobić tak, aby trajektoria była czerwona jak robot się nie porusza / nie może osiągnąć zadanego położenia (zielona już jest)
- przebiegi z RQT
- działanie niezależne od położenia początkowego 
KONCEPCJA:
 - dodatkowy callback dla subscribera, który wywoła się raz (dodanie np. flagi) i zczyta joint_states do parametrów (self)










